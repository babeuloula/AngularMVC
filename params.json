{"name":"AngularMVC","tagline":"AngularMVC et un bootstrap qui vous permettra de commencer rapidement des applications avec AngularJS","body":"# AngularMVC\r\n\r\nAngularMVC et un bootstrap qui vous permettra de commencer rapidement des applications avec [AngularJS](https://angularjs.org/).\r\nTotalement opensource et gratuit, vous êtes libre de faire des modifications et de le distribuer mais rappelez quand même qui est son auteur de base ([moi](http://www.babeuloula.fr/)).\r\nJe ne dit pas que c'est **THE** bootstrap, mais c'est du moins le cas pour moi car il me permet d'aller plus vite.\r\n\r\n# Architecture\r\n\r\nCe bootstrap se compose de divers dossiers et fichiers afin de séparer le code de la meilleur façon qu'il soit (celon moi).\r\n\r\n## Dossiers et fichiers\r\n\r\n- **controllers** : Dossier contenant les controllers\r\n- **css** : Dossier contenant vos styles css\r\n- **databases** : Dossier contenant les bases de données json\r\n- **factories** : Dossier contenant les factories (y compris le factory de base sous forme d'une class Javascript)\r\n- **js** : Dossier contenant vos scripts Javascript\r\n- **rooter** : Dossier contenant le gestionnaire de routes\r\n- **views** : Dossier contenant les vues de votre applications\r\n- **index.html** : Cœur de l'application, ~~la cuisine~~,  là où vous allez chargez vos tous vos fichiers (controllers, factory, css, js ...) et c'est là aussi où vous allez faire inscrire vos controllers et factories à AngularJS.\r\n\r\n### Création d'un controller\r\n\r\nVous avez simplement à créer un fichier, par exemple, *BlogController.js* dans le dossier *controllers* et le structurer comme ceci :\r\n\r\n```javascript\r\n    var BlogController = {\r\n\t    blog: { // Nom de l'action\r\n\t        url: '/blog/' // URL de la route\r\n\t        routeName: 'blog', // Nom de la route\r\n\t        templateUrl: 'views/Blog/blog.html', // Emplacement de la vue\r\n\t        controller: function ($rootScope, $scope) { // Son action\r\n\t            // Ma super action à effectuer\r\n\t        }\r\n\t    }\r\n\t};\r\n```\r\n\r\nPlus besoin d'inscrire le controller à AngularJS dans le fichier *index.html*, car angular-ui le gère\r\n\r\n### Création d'une factory\r\n\r\nCréez un fichier, par exemple, *BlogFactory.js* dans le dossier *factories* et structurez le comme ceci : \r\n\r\n```javascript\r\n    var BlogFactory= {\r\n\t    factory: function($http, $q) {\r\n\t        var factory = {\r\n\t            blog: false, // Permet d'avoir un système de cache et de ne pas lancer une requête AJAX à chaque fois\r\n\t\r\n\t            connection: function() { // Fonction de connexion\r\n\t                var deferred = $q.defer();\r\n\t\r\n\t                if(factory.articles) {\r\n\t                    deferred.resolve(factory.articles);\r\n\t                } else {\r\n\t                    var db = new Factory('article.json'); // Nom du fichier à aller chercher\r\n\t\r\n\t                    db.connect($http, $q).then(function (response) {\r\n\t                        if(response.ack && response.statut === 200) {\r\n\t                            factory.blog= response.datas;\r\n\t                            deferred.resolve(factory.blog);\r\n\t                        } else {\r\n\t                            console.log(\"Erreur lors de la connextion à la base du blog\"); // Votre message d'erreur perso\r\n\t                        }\r\n\t                    }, function(error) {\r\n\t                        console.log(error);\r\n\t                    });\r\n\t                }\r\n\t\r\n\t                return deferred.promise;\r\n\t            },\r\n\t\r\n\t\t\t\t// Vos fonctions qui vous permettrons de récupérer vos données\r\n\t            findAll: function() {\r\n\t                var deferred = $q.defer();\r\n\t\r\n\t                factory.connection().then(function(datas) {\r\n\t                    deferred.resolve(datas);\r\n\t                }, function(error) {\r\n\t                    console.log(error);\r\n\t                });\r\n\t\r\n\t                return deferred.promise;\r\n\t            }\r\n\t        };\r\n\t\r\n\t        return factory;\r\n\t    }\r\n\t};\r\n```\r\n\r\n N'oubliez pas de l'inscrire à AngularJS dans le fichier *index.html* :\r\n \r\n```javascript\r\n    app.factory('BlogFactory', ['$http', '$q', BlogFactory.factory]);\r\n```\r\n\r\n### Création d'une route\r\n\r\nOuvrez le fichier *rooter/rooter.js* et ajoutez des routes à la suite des autres *when* comme ceci :\r\n\r\n```javascript\r\n    .state(BlogController.blog.routeName, BlogController.blog)\r\n```\r\n\r\nPour la gestion de route, vous n'avez plus besoin de vous souvenir des URL, vous appelez juste le nom que vous avez indiqué dans *routeName* :\r\n \r\n```html\r\n    <a ui-sref=\"blog\">Lire mon blog</a>\r\n```\r\n\r\nPour les routes avec des paramètres, regardez la vue *Article/articles.html*.\r\n\r\n# Compilation\r\n\r\nNormalement, j'ai essayé d'utiliser au maximum la syntaxe décrite dans la [documentation](https://docs.angularjs.org/api) d'AngularJS permettant une compilation des fichiers JS sans risquer de problème.\r\n\r\nAmusez-vous bien avec et en cas de soucis, contactez-moi !\r\n\r\n# Changelog\r\n\r\n* Modification du système de route.\r\n    * *angularjs/ngRoute* vers *angular-ui/ui.router*","google":"UA-66612324-1","note":"Don't delete this file! It's used internally to help with page regeneration."}